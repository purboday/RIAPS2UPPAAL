{% macro timer(port) -%}
clock counter;
int period = {{port.period}};
{% if {{port.period}} == 0}
bool periodic = false;
bool _running = false;
bool active = false;
int timeout = 0;
{ % else %}
bool periodic = true;
bool _running = true;
bool active = true;
int timeout = {{port.period}};
{% endif %}
int delay = 0;
bool skip = false;

void handleTimeout()
{
    if (!active)
    {
        timeout = 0;
    }
    else
    {
        if (_running)
        {
            if (periodic && skip)
            {
                skip = false;
            }
            else
            {
                push(port_name);
            }
        }
        if (periodic)
        {
            timeout = period;
        }
        else
        {
            _running = false;
            timeout = 0;
        }
    }
}

void handleStart()
{
    if (active)
    {
        if (periodic)
        {
            timeout = period;
        }
        else
        {
            timeout = delay;
        }
    }
    else
    {
        timeout = 0;
    }
}

void handleCancel()
{
    if (periodic)
    {
        timeout = period;
        skip = true;
    }
    else
    {
        timeout = 0;
        _running = false;
    }
}

state
    loc_78,
    loc_80;
init
    loc_78;
trans
    loc_78 -> loc_78 { guard timeout > 0 && counter >= timeout; assign handleTimeout(), counter = 0; },
    loc_78 -> loc_78 { sync cancel?; assign handleCancel(); },
    loc_78 -> loc_78 { sync start?; assign handleStart(); },
    loc_78 -> loc_78 { sync deactivate?; assign active = false; },
    loc_78 -> loc_78 { sync activate?; assign active = true; },
    loc_78 -> loc_80 { sync terminate?; };
}
{%- endmacro %}